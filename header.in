<style>
  .grammar-rule {
    color: black;
    background-color: hsl(120, 100%, 90%);
    font-weight: bold;
    padding: 2px;
    border: 2px solid black;
  }
</style>

<pre class="metadata">
Title: URL Standard
Group: WHATWG
H1: URL
Shortname: url
Status: LS
Editor: Sam Ruby, IBM https://www.ibm.com/, rubys@intertwingly.net, http://intertwingly.net/blog/
Abstract: This specification <a href="http://agiledictionary.com/209/spike/">spike</a> defines parsing rules for URLs and includes a <a href="https://github.com/rubys/url/tree/peg.js/reference-implementation#readme">reference implementation</a> as well as a <a href="http://intertwingly.net/projects/pegurl/liveview.html">Live DOM URL Viewer</a>.  <a href=http://intertwingly.net/projects/pegurl/urltest-results/>Interop test results</a> are also available.
Logo: https://resources.whatwg.org/logo-url.svg
!Version History: <a href="https://github.com/rubys/url/commits/peg.js">https://github.com/rubys/url/commits/peg.js</a>
!Participate: <a href="https://github.com/rubys/url/issues/new">File an issue</a> (<a href="https://github.com/rubys/url/issues?q=">issues</a>)
!Participate: <a href="mailto:public-webapps@w3.org">public-webapps@w3.org</a> (<a href="http://lists.w3.org/Archives/Public/public-webapps/">archives</a>)
!Participate: <a href="https://whatwg.org/mailing-list">whatwg@whatwg.org</a> (<a href="https://whatwg.org/mailing-list#specs">archives</a>)
!Participate: <a href="http://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
</pre>

Goals {#goals}
=====

  * Resolve 
    <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=25946">bug
    25946</a> by merging this specification with the <a
    href="https://url.spec.whatwg.org/">URL Living Standard</a>.  Once a new
    baseline has been established, evolve the standard towards greater web
    compatibility, greater interoperability, and simpler algorithms, in that
    order.
  * Integrate with <a href="https://travis-ci.org/">Travis</a> and activate the
    <a href="http://docs.travis-ci.com/user/getting-started/#Step-two%3A-Activate-GitHub-Webhook">GitHub
    WebHook</a> so that proposed changes are verified to build correctly and
    pass the relevant tests.</a>
  * Evaluate
    <a href="https://tools.ietf.org/html/draft-ietf-appsawg-uri-scheme-reg-04">draft-thaler-appsawg-uri-scheme-reg</a>
    for the scheme registration mechanism in the
    <a href="https://url.spec.whatwg.org/#url-writing">URL writing</a> section.
  * Explore the idea of obsoleting <em>only</em> [[rfc3987]] and not
    [[rfc3986]] too.  Consider explicitly adopting the following constraints on
      the canonicalized output of URL parsing:
      * URL parsing of canonicalized outputs roundtrip (i.e., the URL parser is
        an identity transform for such inputs).
      * All canonicalized output are valid URIs (and, if necessary, submit
        errata and/or identify specific
        <a href="https://html.spec.whatwg.org/multipage/introduction.html#compliance-with-other-specifications">willful
        violations</a>).  Examples of an items needing to be worked:
          * <code>http://example.com/?%</code> is not a valid URL or a valid
              URI, yet it round-trips the URL parsing/serialization
              transformation.  Are any changes needed to RFC 3986 to
              accommodate this?
              [<a href="http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Nov/0005.html">source</a>]
          * Parsing <code>../test</code> against a base of
            <code>foobar://test/x</code> as a URL results in different
            results with different user agents and different standards.
              [<a href="http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Nov/0019.html">source</a>]
              [<a href="http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Nov/0047.html">update</a>]
          * Other differences may be found in the
            <a href=http://intertwingly.net/projects/pegurl/urltest-results/>interop
            test results</a> or using the
            <a href="http://intertwingly.net/projects/pegurl/liveview2.html">Live
            DOM URL Viewer</a>.

  * Incorporate the substance of the
    <a href="http://www.w3.org/TR/html5/references.html#refsURL">informative
    note</a> that precedes the [URL] normative reference in the
    <a href="http://www.w3.org/TR/html5/">HTML5 Recommendation</a> into a
    status section or equivalent in this document.
  * Define more soft <a>parse errors</a>.  The 
    <a href="https://url.spec.whatwg.org/">URL living standard</a> has a start,
    but there needs to be more.

Todos / Differences {#todos}
=====

These are items that should be done before the proposed merge:

  * Make it more clear what is normative; to be honest, I'm confused on this
    point as the only real normative requirement for the parts defined by this
    spec-let is "produce the same output as the algorithm defined herein".
  * Implement <a href="https://url.spec.whatwg.org/#urlutils-and-urlutilsreadonly-members">Url
    property getters and setters</a>.
  * Reconcile the [[#host]] parsing rules with the Encoding Living Standard
    [[!encoding]] and <a href="https://url.spec.whatwg.org/#idna">IDNA</a>.

Known differences with current drafts of the WHATWG <a href="https://url.spec.whatwg.org/">URL Standard</a>:

  * This draft treats URLs of the form <code>//C|/foo/bar</code> as a parse
    error, whereas current drafts of the URL standard do not.
    <a href=http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Oct/0267.html>Anne
    agrees</a> that this should be a parse error.

Parsing Rules {#parsing-rules}
=============

These railroad diagrams, as modified by the accompanying text, define grammar
production rules for URLs.  They are to be evaluated sequentially, first
left-to-right then top-to-bottom, backtracking as necessary, until a complete
match against the input provided is found.

Each rule can be invoked individually.  Rules can also invoke one another.
Rules when evaluated return a JSON objection, typically either a string or an
object where all of the values are strings.  The one exception is path values,
which are arrays of strings.

Two types of <dfn>parse errors</dfn> are defined.  Hard errors (indicated in
the spec with the following text: <em>terminate processing with a parse
error</em>) are mandatory.  Soft errors (all other errors) are optional.  User
agents are encouraged to expose <a
href="https://url.spec.whatwg.org/#parse-error">parse errors</a> somehow.

Note: the following subsections are intended to replace steps 5-8 in the 
<a href="https://url.spec.whatwg.org/#concept-basic-url-parser">basic url parser</a>.  It also works out better if step 3 were to default <var>base</var> to a
non-null value, ideally one with a non-relative scheme, for example:
<code>{'scheme': 'about'}</code>.
