<style>
  .grammar-rule a {
    color: black;
    background-color: hsl(120, 100%, 90%);
    font-weight: bold;
    padding: 2px;
    border: 2px solid black;
  }
</style>

<pre class="metadata">
Title: URL Standard
Group: WHATWG
H1: URL
Shortname: url
Status: LS
Editor: Sam Ruby, IBM https://www.ibm.com/, rubys@intertwingly.net, http://intertwingly.net/blog/
Abstract: This specification <a href="http://agiledictionary.com/209/spike/">spike</a> defines parsing rules for URLs and includes a <a href="https://github.com/rubys/url/tree/peg.js/reference-implementation#readme">reference implementation</a> as well as a <a href="http://intertwingly.net/projects/pegurl/liveview.html">Live DOM URL Viewer</a>.  <a href=http://intertwingly.net/projects/pegurl/urltest-results/>Interop test results</a> are also available.
Logo: https://resources.whatwg.org/logo-url.svg
!Version History: <a href="https://github.com/rubys/url/commits/peg.js">https://github.com/rubys/url/commits/peg.js</a>
!Participate: <a href="https://www.w3.org/Bugs/Public/enter_bug.cgi?product=WHATWG&component=URL">File a bug</a> (<a href="https://www.w3.org/Bugs/Public/buglist.cgi?component=URL&list_id=46839&product=WHATWG&resolution=---">open bugs</a>)
!Participate: <a href="https://github.com/rubys/url/issues/new">File an issue</a> (<a href="https://github.com/rubys/url/issues?q=">issues</a>)
!Participate: <a href="mailto:public-webapps@w3.org">public-webapps@w3.org</a> (<a href="http://lists.w3.org/Archives/Public/public-webapps/">archives</a>)
!Participate: <a href="https://whatwg.org/mailing-list">whatwg@whatwg.org</a> (<a href="https://whatwg.org/mailing-list#specs">archives</a>)
!Participate: <a href="http://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
</pre>

Todos {#todos}
===

The goal of this proposal is to resolve
<a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=25946">bug 25946</a>
by merging this specification with the 
<a href="https://url.spec.whatwg.org/">URL Living Standard</a>.  Once a new
baseline has been established, evolve the standard towards greater web
compatibility, greater interoperability, and simpler algorithms, in that
order.

These are items that should be done before the proposed merge:

  * Make it more clear what is normative; to be honest, I'm confused on this
    point as the only real normative requirement for the parts defined by this
    spec-let is "produce the same output as the algorithm defined herein".
  * Implement <a href="https://url.spec.whatwg.org/#urlutils-and-urlutilsreadonly-members">Url
    property getters and setters</a>.

Differences {#diffs}
---

Known differences with current drafts of the WHATWG <a href="https://url.spec.whatwg.org/">URL Standard</a>:

  * This draft treats URLs of the form <code>//C|/foo/bar</code> as a parse
    error, whereas current drafts of the URL standard do not.
    <a href=http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Oct/0267.html>Anne
    agrees</a> that this should be a <a>conformance error</a>.
  * This draft treats hosts which contain consecutive dot characters as a
    <a>conformance error</a>, whereas current drafts of the URL standard do not.
    <a href=http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Oct/0267.html>Anne
    agrees</a> that this should be a <a>conformance error</a>.
  * This draft contains a proposed implementation of 
    <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=26431">bug 26431</a>
    (Define IPv4 parsing).
  * The reference implementation contains a proposed implementation of
    <a href="https://www.w3.org/Bugs/Public/show_bug.cgi?id=27289">bug 27289</a>
    (Host parsing and utf8PercentDecode).
  * This draft indicates a <a>conformance error</a> if
    <a href="https://url.spec.whatwg.org/#concept-host-parser">host
    parsing</a> changes the domain.
    [<a href=http://krijnhoetmer.nl/irc-logs/whatwg/20141110#l-533>IRC
    discussion</a>]

Post-merge work items {#postmerge}
---

  * Integrate with <a href="https://travis-ci.org/">Travis</a> and activate the
    <a href="http://docs.travis-ci.com/user/getting-started/#Step-two%3A-Activate-GitHub-Webhook">GitHub
    WebHook</a> so that proposed changes are verified to build correctly and
    pass the relevant tests.</a>
  * Evaluate
    <a href="https://tools.ietf.org/html/draft-ietf-appsawg-uri-scheme-reg-04">draft-thaler-appsawg-uri-scheme-reg</a>
    for the scheme registration mechanism in the
    <a href="https://url.spec.whatwg.org/#url-writing">URL writing</a> section.
  * Explore the idea of obsoleting <em>only</em> [[rfc3987]] and not
    [[rfc3986]] too.  Consider explicitly adopting the following constraints on
      the canonicalized output of URL parsing:
      * URL parsing of canonicalized outputs roundtrip (i.e., the URL parser is
        an identity transform for such inputs).
      * All canonicalized output are valid URIs (and, if necessary, submit
        errata and/or identify specific
        <a href="https://html.spec.whatwg.org/multipage/introduction.html#compliance-with-other-specifications">willful
        violations</a>).  Examples of an items needing to be worked:
          * <code>http://example.com/?%</code> is not a valid URL or a valid
              URI, yet it round-trips the URL parsing/serialization
              transformation.  Are any changes needed to RFC 3986 to
              accommodate this?
              [<a href="http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Nov/0005.html">source</a>]
          * Parsing <code>../test</code> against a base of
            <code>foobar://test/x</code> as a URL results in different
            results with different user agents and different standards.
              [<a href="http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Nov/0019.html">source</a>]
              [<a href="http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Nov/0047.html">update</a>]
          * Other differences may be found in the
            <a href=http://intertwingly.net/projects/pegurl/urltest-results/>interop
            test results</a> or using the
            <a href="http://intertwingly.net/projects/pegurl/liveview2.html">Live
            DOM URL Viewer</a>.

  * Incorporate relevant substance from the
    <a href="http://www.w3.org/TR/html5/references.html#refsURL">informative
    note</a> that precedes the [URL] normative reference in the
    <a href="http://www.w3.org/TR/html5/">HTML5 Recommendation</a> into a
    status section or equivalent in this document.  Expand on that information
    with specific notes on known interop issues.  An example of this can be
    found in [[#file-url]].

  * Define more <a>conformance errors</a>.  The 
    <a href="https://url.spec.whatwg.org/">URL living standard</a> has a start,
    but there needs to be more.

Discussion Items {#discuss}
---

  * Chrome and Firefox percent encode "]" in passwords.  The only user agents
    that don't are ones that attempt to follow the specification.

    <a href=http://intertwingly.net/projects/pegurl/urltest-results/0fc16e7f9d>example</a>

  * Does it make sense to support a zero length username when a non empty
    password is specified?

    <a href=http://intertwingly.net/projects/pegurl/urltest-results/9c7b1c42d3>example</a>

  * Some user agents intentionally don't provide API access to passwords.
    This seems like a defensible choice.  For some, that merely means not
    implementing username and password.  For a few, this includes not
    providing access to href if that content contains password information.

    <a href=http://intertwingly.net/projects/pegurl/urltest-results/7357a04b5b>example</a>

  * Given that there is little apparent consensus on how to handle '@' signs
    in user and passwords, I see no justification for defining behavior that
    reorders the characters in the input (see "prepend" in 
    <a href=https://url.spec.whatwg.org/#authority-state>authority-state</a>,
    and [[#authority]]).  Percent encoding the '@' sign is defensible.
  
    <a href=http://intertwingly.net/projects/pegurl/urltest-results/1bdb1f0518>example</a>

  * IDNA mapping can produce an IPv4 address.  This needs to be handled, as
    the results won't round trip.

    <a href=http://intertwingly.net/projects/pegurl/urltest-results/683ac9869d>example</a>

  * A number of agents don't support port numbers above 64K.  It seems
    sensible to adopt this restriction.

    <a href=http://intertwingly.net/projects/pegurl/urltest-results/a193745897>example</a>

  * IE maps a windows path syntax to a file: syntax.  Chrome maps a novel
    syntax to a file: syntax, but only appears to do so when running on
    Windows.  The current draft of the URL Standard adopts and extends the
    windows drive path syntax to all operating systems.  I think this choice
    is worth revisiting.

    <a href=http://intertwingly.net/projects/pegurl/urltest-results/eb30a2c2d0>example</a>
    <a href=http://intertwingly.net/projects/pegurl/urltest-results/4b60e32190>example</a>

  * Safari percent encodes non-ASCII characters in the hash.  No other browser
    does.  Perhaps this should be revisited?

    <a href=http://intertwingly.net/projects/pegurl/urltest-results/79e1a94e3f>example</a>



Parsing Rules {#parsing-rules}
=============

These railroad diagrams, as modified by the accompanying text, define grammar
production rules for URLs.  They are to be evaluated sequentially, first
left-to-right then top-to-bottom, backtracking as necessary, until a complete
match against the input provided is found.

Each rule can be invoked individually.  Rules can also invoke one another.
Rules when evaluated return a JSON objection, typically either a string or an
object where all of the values are strings.  The one exception is path values,
which are arrays of strings.

Two types of parse errors are defined.  <dfn title='parse exception'>Parse
exceptions</dfn> terminate parsing and must be implemented by all conforming
implementations.  By contrast, user agents are encouraged, but not required,
to expose <dfn title='conformance error'>conformance errors</dfn> somehow.

Note: the following subsections are intended to replace steps 5-8 in the 
<a href="https://url.spec.whatwg.org/#concept-basic-url-parser">basic url parser</a>.  It also works out better if step 3 were to default <var>base</var> to a
non-null value, ideally one with a non-relative scheme, for example:
<code>{'scheme': 'about'}</code>.
